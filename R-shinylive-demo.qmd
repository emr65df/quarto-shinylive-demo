---
title: "r-shinylive-demo with wildlife data!"
format:
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)
library(datasets)
library(zoo)
library(dplyr)
library(ggplot2)

sunspot.month <- datasets::sunspot.month
sunspots_df <- data.frame(count = as.matrix(sunspot.month), date=as.POSIXct(zoo::as.yearmon(time(sunspot.month))))



# Define UI for app ----
ui <- page_sidebar(
  sidebar = sidebar(open = "open",
    selectInput("year_of_data",
                label = "Choose Year to Display",
                choices = list(1749,
                               1849,
                               1949),
                selected = 1849)
  ),
  plotOutput("column_plot", width=1100)
)
  
server <- function(input, output, session) {
  
  data <- reactive({
    sunspots_df %>%
  filter(year(date) == input$year_of_data) 
  })
  
  output$column_plot <- renderPlot({
  ggplot(data()) + 
  geom_col(aes(x = date, y = count), color = "orange", fill = "darkorange4") +
  scale_x_datetime(date_label = "%m", breaks = "1 month", expand=c(0,0)) +
  scale_y_continuous(labels = NULL, breaks = NULL) + 
  labs(y = "Sunspot Count", x = "\nMonth") +
  ggtitle(paste0("Sunspot Counts in the Year ", input$year_of_data)) +
  theme_classic()
    
  }, res=140)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```


Document Source (minus links): 

````md
---
title: "Joe Cheng's r-shinylive App in a Quarto document!"
format:
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(
  sidebar = sidebar(open = "open",
    numericInput("n", "Sample count", 100),
    checkboxInput("pause", "Pause", FALSE),
  ),
  plotOutput("plot", width=1100)
)

server <- function(input, output, session) {
  data <- reactive({
    input$resample
    if (!isTRUE(input$pause)) {
      invalidateLater(1000)
    }
    rnorm(input$n)
  })
  
  output$plot <- renderPlot({
    hist(data(),
      breaks = 40,
      xlim = c(-2, 2),
      ylim = c(0, 1),
      lty = "blank",
      xlab = "value",
      freq = FALSE,
      main = ""
    )
    
    x <- seq(from = -2, to = 2, length.out = 500)
    y <- dnorm(x)
    lines(x, y, lwd=1.5)
    
    lwd <- 5
    abline(v=0, col="red", lwd=lwd, lty=2)
    abline(v=mean(data()), col="blue", lwd=lwd, lty=1)

    legend(legend = c("Normal", "Mean", "Sample mean"),
      col = c("black", "red", "blue"),
      lty = c(1, 2, 1),
      lwd = c(1, lwd, lwd),
      x = 1,
      y = 0.9
    ) 
  }, res=140)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```
````